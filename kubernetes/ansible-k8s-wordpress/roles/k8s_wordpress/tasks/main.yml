---
- name: copy wordpress-manifest
  copy: src=manifest dest=/tmp

- name: Get current namespaces
  command: kubectl get namespaces -o go-template={% raw %}'{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}'{% endraw %}
  register: k8s_namespaces
  changed_when: false

- name: Create namespace
  command: kubectl create namespace {{ wordpress.namespace }}
  when: wordpress.namespace not in k8s_namespaces.stdout_lines

- name: create secret
  shell: kubectl create secret generic mysql-pass --from-literal=password="{{ ROOT_PASSWORD }}" -n "{{ wordpress.namespace }}"

- name: copy ingress
  template: src=wordpress-ingress.j2 dest={{ wordpress.path }}/wordpress-ingress.yml -n "{{ wordpress.namespace }}"

- name: copy wordpress volume
  template: src=wordpress-volumes.j2 dest={{ wordpress.path }}/wordpress-volumes.yml -n "{{ wordpress.namespace }}"

- name: copy mysql volume
  template: src=wordpress-mysql-volumes.j2 dest={{ wordpress.path }}/wordpress-mysql-volumes.yml -n "{{ wordpress.namespace }}"

- name: creating persistentVolume and claims for mysql
  shell: kubectl apply -f {{ wordpress.path }}/wordpress-mysql-volumes.yml -n "{{ wordpress.namespace }}"

- name: creating persistentVolume and claims for WP
  shell: kubectl apply -f {{ wordpress.path }}/wordpress-volumes.yml -n "{{ wordpress.namespace }}"

- name: apply kubernetes objects for mysql 
  shell: kubectl apply -f {{ wordpress.path }}/mysql.yml -n "{{ wordpress.namespace }}"

- name: apply kubernetes objects for WP
  shell: kubectl apply -f {{ wordpress.path }}/wordpress.yml -n "{{ wordpress.namespace }}"

- name: Create Ingress
  shell: kubectl apply -f {{ wordpress.path }}/wordpress-ingress.yml -n "{{ wordpress.namespace }}"

- name: Create tls-secret
  shell: kubectl create secret tls tls-secret --key {{ wordpress.path }}/tls.key --cert {{ wordpress.path }}/tls.crt -n "{{ wordpress.namespace }}"